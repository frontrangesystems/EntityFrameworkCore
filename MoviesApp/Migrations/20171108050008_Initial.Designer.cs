// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MoviesApp.Data;
using System;

namespace MoviesApp.Migrations
{
    [DbContext(typeof(MoviesContext))]
    [Migration("20171108050008_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("MoviesApp.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("ActorId");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("MoviesApp.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MoviesApp.Entities.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("RatingCode");

                    b.Property<int?>("RatingId");

                    b.Property<int?>("ReleaseYear");

                    b.Property<int?>("Runtime");

                    b.Property<string>("Title");

                    b.HasKey("FilmId");

                    b.HasIndex("RatingId");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmActor", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("ActorId");

                    b.HasKey("FilmId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("FilmActor");
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmCategory", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("CategoryId");

                    b.HasKey("FilmId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FilmCategory");
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmImage", b =>
                {
                    b.Property<int>("FilmImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FilmId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Title");

                    b.HasKey("FilmImageId");

                    b.HasIndex("FilmId")
                        .IsUnique();

                    b.ToTable("FilmImage");
                });

            modelBuilder.Entity("MoviesApp.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("RatingId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MoviesApp.Entities.Film", b =>
                {
                    b.HasOne("MoviesApp.Entities.Rating", "Rating")
                        .WithMany("Films")
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmActor", b =>
                {
                    b.HasOne("MoviesApp.Entities.Actor", "Actor")
                        .WithMany("FilmActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Entities.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmCategory", b =>
                {
                    b.HasOne("MoviesApp.Entities.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Entities.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Entities.FilmImage", b =>
                {
                    b.HasOne("MoviesApp.Entities.Film", "Film")
                        .WithOne("FilmImage")
                        .HasForeignKey("MoviesApp.Entities.FilmImage", "FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
